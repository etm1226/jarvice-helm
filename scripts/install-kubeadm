#!/bin/bash

MAJOR_VER=1.18

function usage {
    cat <<EOF
Usage:
    $0 [options]

Options:
    --major-version <version>   Version to install (audo-detects point release)
                                (Default: $MAJOR_VER)

Example:
    $0 --major-version 1.16
EOF
}

DOCKER=$(type -p docker)
if [ "$(basename $0)" = "install-kubeadm" -a -z "$DOCKER" ]; then
    cat <<EOF
Could not find 'docker' in PATH.  It may not be installed.
Run 'install-docker' from the 'jarvice-helm/scripts' directory to install it.
EOF
    exit 1
fi

SUDO=
if [ "$EUID" != "0" ]; then
    SUDO=sudo
    SUID=$($SUDO id -u)
    if [ "$SUID" != "0" ]; then
        echo "Could not verify sudo access.  Cannot continue."
        echo "Please resolve sudo access before re-running this script."
        exit 1
    else
        echo "* Verified sudo access..."
    fi
fi

while [ $# -gt 0 ]; do
    case $1 in
        --help)
            usage
            exit 0
            ;;
        --major-version)
            MAJOR_VER=$2
            shift; shift
            ;;
        *)
            usage
            exit 1
            ;;
    esac
done

. /etc/os-release
DISTRO="$ID$VERSION_ID"
if [ "$ID" != "ubuntu" ] && [ "$ID" != "centos" ] && [ "$ID" != "rhel" ]; then
    echo "This distro is not supported."
    exit 1
fi

set -e

install_pkgs="kubelet kubeadm kubectl"
[ "$(basename $0)" = "install-kubectl" ] && install_pkgs=kubectl
MAJOR_VER=$(echo $MAJOR_VER | sed -e "s/\./\\\./g")

if [ "$ID" = "ubuntu" ]; then
    $SUDO apt-get update && $SUDO apt-get install -y apt-transport-https curl ca-certificates gnupg-agent software-properties-common
    curl -fsSL https://packages.cloud.google.com/apt/doc/apt-key.gpg | $SUDO apt-key add -
    cat <<EOF | $SUDO tee /etc/apt/sources.list.d/kubernetes.list
#deb https://apt.kubernetes.io/ kubernetes-$VERSION_CODENAME main
deb https://apt.kubernetes.io/ kubernetes-xenial main
EOF
    $SUDO apt-get update
    ver=$(apt-cache show kubectl | grep -i version | awk '{print $2}' | grep "^$MAJOR_VER\." | head -1)
    ver_install_pkgs=$(printf "%s=$ver " $install_pkgs)
    $SUDO apt-mark unhold $install_pkgs
    $SUDO apt-get install -y $ver_install_pkgs
    $SUDO apt-mark hold $install_pkgs
else
    cat <<EOF | $SUDO tee /etc/yum.repos.d/kubernetes.repo
[kubernetes]
name=Kubernetes
#baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el$VERSION_ID-$(arch)
baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-$(arch)
enabled=1
gpgcheck=1
repo_gpgcheck=1
gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
# Prevent accidental package updates
exclude=kube*
EOF
    ver=$(yum list -y --quiet --showduplicates --disableexcludes=kubernetes kubectl 2>/dev/null | grep ^kubectl | awk '{print $2}' | sort -r | grep -P "^[\d+:]*$MAJOR_VER\." | head -1)
    ver_install_pkgs=$(printf "%s-$ver " $install_pkgs)
    $SUDO yum install -y --disableexcludes=kubernetes $ver_install_pkgs

    [ "$(basename $0)" = "install-kubeadm" ] && $SUDO systemctl enable --now kubelet || /bin/true
fi

if [ "$(basename $0)" = "install-kubeadm" ]; then
    sysctl_file=/etc/sysctl.d/99-sysctl-kubeadm.conf
    echo; echo "* Updating and applying sysctl settings in $sysctl_file..."
    $SUDO modprobe br_netfilter
    cat <<EOF | $SUDO tee $sysctl_file
net.ipv4.ip_forward=1
net.bridge.bridge-nf-call-iptables=1
net.bridge.bridge-nf-call-ip6tables=1
EOF
    $SUDO sysctl --system

    echo; echo "* Disabling swap..."
    $SUDO sed -i -e "s/\(.*\s\)swap\(\s.*\)/#\1swap\2/g" /etc/fstab
    $SUDO swapoff --all

    if [ "$ID" = "centos" ]; then
        echo; echo "* Disabling SELinux..."
        $SUDO sed -i -e 's/^SELINUX=enforcing$/SELINUX=permissive/' /etc/selinux/config
        $SUDO setenforce 0
    fi
    echo
fi

