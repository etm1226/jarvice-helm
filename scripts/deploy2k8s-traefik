#!/bin/bash

load_balancer_ip=
generate_tls=true
default_cert_file=
default_key_file=
replicas=3
memory_request=1Gi
memory_limit=1Gi
cpu_request=1
cpu_limit=1
namespace=kube-system

function usage {
    cat <<EOF
Usage:
    $0 [options]

Options:
    --load-balancer-ip <ip_addr>    Static IP for ingress controller (required)
    --default-cert-file <filename>  TLS default certificate file
    --default-key-file <filename>   TLS default key file
    --replicas <replicas>           Number of pod replicas to run
                                    (Default: $replicas)
    --memory-request <memory>       Memory request for each pod
                                    (Default: $memory_request)
    --memory-limit <memory>         Memory limit for each pod
                                    (Default: $memory_limit)
    --cpu-request <cpu>             CPU request for each pod
                                    (Default: $cpu_request)
    --cpu-limit <cpu>               CPU limit for each pod
                                    (Default: $cpu_limit)
    --namespace <kube_namespace>    Kubernetes namespace to deploy to
                                    (Default: $namespace)
EOF
}

HELM=$(type -p helm)
if [ -z "$HELM" ]; then
    cat <<EOF
Could not find 'helm' in PATH.  It may not be installed.
Run 'install-helm' from the 'jarvice-helm/scripts' directory to install it.
EOF
    exit 1
fi

KUBECTL=$(type -p kubectl)
if [ -z "$KUBECTL" ]; then
    cat <<EOF
Could not find 'kubectl' in PATH.  It may not be installed.
Run 'install-kubectl' from the 'jarvice-helm/scripts' directory to install it.
EOF
    exit 1
fi

while [ $# -gt 0 ]; do
    case $1 in
        --help)
            usage
            exit 0
            ;;
        --default-cert-file)
            default_cert_file=$2
            shift; shift
            ;;
        --default-key-file)
            default_key_file=$2
            shift; shift
            ;;
        --load-balancer-ip)
            load_balancer_ip=$2
            shift; shift
            ;;
        --replicas)
            replicas=$2
            shift; shift
            ;;
        --memory-request)
            memory_request=$2
            shift; shift
            ;;
        --memory-limit)
            memory_limit=$2
            shift; shift
            ;;
        --cpu-request)
            cpu_request=$2
            shift; shift
            ;;
        --cpu-limit)
            cpu_limit=$2
            shift; shift
            ;;
        --namespace)
            namespace=$2
            shift; shift
            ;;
        *)
            usage
            exit 1
            ;;
    esac
done

[ -z "$load_balancer_ip" ] && usage && exit 1

[ -n "$default_cert_file" ] && default_cert="$(cat $default_cert_file | base64 -w 0)"
[ -n "$default_key_file" ] && default_key="$(cat $default_key_file | base64 -w 0)"
[ -n "$default_cert_file" -a -n "$default_key_file" ] && generate_tls=false

set -e

helm_stable_repo_url=https://charts.helm.sh/stable
helm_stable_repo=$($HELM repo list 2>/dev/null | grep ^stable || /bin/true)
if [ -z "$helm_stable_repo" ]; then
    echo
    echo "* Adding helm chart repository for stable..."
    $HELM repo add stable $helm_stable_repo_url
fi

echo
echo "* Updating helm chart repositories..."
$HELM repo update

echo
echo "* Creating namespace: $namespace"
$KUBECTL create namespace $namespace 2>/dev/null || /bin/true

echo
if [ "$generate_tls" = "true" ]; then
    echo "* Deploying with self signed certificate..."
else
    echo "* Deploying with the provided certificate files..."
fi
echo
$HELM upgrade traefik stable/traefik \
    --namespace $namespace --install --reset-values \
    \
    --set rbac.enabled=true \
    \
    --set nodeSelector."kubernetes\.io/arch"=amd64 \
    --set-string nodeSelector."node-role\.jarvice\.io/jarvice-system"="true" \
    \
    --set tolerations[0]."key"="node-role\.jarvice\.io/jarvice-system" \
    --set tolerations[0]."effect"="NoSchedule" \
    --set tolerations[0]."operator"="Exists" \
    \
    --set tolerations[1]."key"="node-role\.kubernetes\.io/jarvice-system" \
    --set tolerations[1]."effect"="NoSchedule" \
    --set tolerations[1]."operator"="Exists" \
    \
    --set loadBalancerIP=$load_balancer_ip \
    \
    --set ssl.enabled=true \
    --set ssl.enforced=true \
    --set ssl.permanentRedirect=true \
    --set ssl.insecureSkipVerify=true \
    --set ssl.generateTLS=$generate_tls \
    --set ssl.defaultCert="$default_cert" \
    --set ssl.defaultKey="$default_key" \
    \
    --set replicas=$replicas \
    --set memoryRequest=$memory_request \
    --set memoryLimit=$memory_limit \
    --set cpuRequest=$cpu_request \
    --set cpuLimit=$cpu_limit

echo
echo "* Deployment successful..."

echo
echo "For advanced setup details, visit https://traefik.io/ and/or execute:"
echo "$ helm inspect all stable/traefik"

