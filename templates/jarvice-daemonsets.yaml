{{- $daemonSetsNamespace := printf "%s-daemonsets" .Release.Namespace -}}
{{- if (not (empty .Values.jarvice.JARVICE_DAEMONSETS_NAMESPACE)) }}
{{- $daemonSetsNamespace = .Values.jarvice.JARVICE_DAEMONSETS_NAMESPACE -}}
{{- end }}
{{- $daemonSetsItems := (lookup "apps/v1" "DaemonSet" "" "").items -}}
{{- if or .Values.jarvice.daemonsets.cache_pull.enabled .Values.jarvice.daemonsets.lxcfs.enabled .Values.jarvice.daemonsets.nvidia.enabled .Values.jarvice.daemonsets.rdma.enabled .Values.jarvice.daemonsets.node_init.enabled .Values.jarvice.daemonsets.disable_hyper_threading.enabled .Values.jarvice.daemonsets.dri_optional.enabled .Values.jarvice.daemonsets.nvidia_install.enabled .Values.jarvice.daemonsets.flex_volume_plugin_nfs_nolock_install.enabled .Values.jarvice_registry_proxy.enabled }}
apiVersion: {{ template "apiVersion.priorityClass" . }}
kind: PriorityClass
metadata:
{{- if empty .Values.jarvice.JARVICE_DAEMONSETS_NAMESPACE }}
  name: {{ .Release.Namespace }}-daemonsets
{{- else }}
  name: {{ .Values.jarvice.JARVICE_DAEMONSETS_NAMESPACE }}
{{- end }}
{{- if empty .Values.jarvice.JARVICE_DAEMONSETS_NAMESPACE }}
  namespace: {{ .Release.Namespace }}-daemonsets
{{- else }}
  namespace: {{ .Values.jarvice.JARVICE_DAEMONSETS_NAMESPACE }}
{{- end }}
value: 1000000000
globalDefault: false
description: "This priority class is for JARVICE DaemonSet pods."
---
{{- end }}
{{- if .Values.jarvice.daemonsets.cache_pull.enabled }}
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: jarvice-cache-pull
{{- if empty .Values.jarvice.JARVICE_DAEMONSETS_NAMESPACE }}
  namespace: {{ .Release.Namespace }}-daemonsets
{{- else }}
  namespace: {{ .Values.jarvice.JARVICE_DAEMONSETS_NAMESPACE }}
{{- end }}
  labels:
    {{- include "jarvice.release_labels" . | indent 4 }}
    component: jarvice-cache-pull
spec:
  selector:
    matchLabels:
      component: jarvice-cache-pull
  template:
    metadata:
      labels:
        {{- include "jarvice.release_labels" . | indent 8 }}
        component: jarvice-cache-pull
    spec:
{{- if (not (empty .Values.jarvice.daemonsets.cache_pull.tolerations)) }}
      tolerations: {{ .Values.jarvice.daemonsets.cache_pull.tolerations }}
{{- else if (not (empty .Values.jarvice.daemonsets.tolerations)) }}
      tolerations: {{ .Values.jarvice.daemonsets.tolerations }}
{{- end }}
{{- if (not (empty .Values.jarvice.daemonsets.cache_pull.nodeAffinity)) }}
      affinity:
        nodeAffinity: {{ .Values.jarvice.daemonsets.cache_pull.nodeAffinity  }}
{{- else if (not (empty .Values.jarvice.daemonsets.nodeAffinity)) }}
      affinity:
        nodeAffinity: {{ .Values.jarvice.daemonsets.nodeAffinity }}
{{- end }}
{{- if (not (empty .Values.jarvice.daemonsets.cache_pull.nodeSelector)) }}
      nodeSelector: {{ .Values.jarvice.daemonsets.cache_pull.nodeSelector }}
{{- else if (not (empty .Values.jarvice.daemonsets.nodeSelector)) }}
      nodeSelector: {{ .Values.jarvice.daemonsets.nodeSelector }}
{{- end }}
      volumes:
      - name: config-volume
        configMap:
          name: jarvice-cache-pull
          optional: true
      - name: docker-sock
        hostPath:
          path: /var/run/docker.sock
      - name: jarvice-docker
        secret:
          secretName: jarvice-docker
          items:
          - key: ".dockerconfigjson"
            path: config.json
      containers:
      - name: jarvice-cache-pull
        image: {{ .Values.jarvice.daemonsets.cache_pull.image }}
        imagePullPolicy: {{ default "IfNotPresent" .Values.jarvice.daemonsets.cache_pull.imagePullPolicy }}
        command:
          - /usr/local/bin/jarvice-cache-pull.sh
        env:
          - name: PULL_INTERVAL
            valueFrom:
              configMapKeyRef:
                name: jarvice-cache-pull
                key: interval
        volumeMounts:
          - name: config-volume
            mountPath: /etc/config
            readOnly: true
          - name: docker-sock
            mountPath: /var/run/docker.sock
          - name: jarvice-docker
            mountPath: /root/.docker/jarvice-docker/config.json
            subPath: config.json
{{- if empty .Values.jarvice.JARVICE_DAEMONSETS_NAMESPACE }}
      priorityClassName: {{ .Release.Namespace }}-daemonsets
{{- else }}
      priorityClassName: {{ .Values.jarvice.JARVICE_DAEMONSETS_NAMESPACE }}
{{- end }}
---
{{- if (not (lookup "v1" "ConfigMap" $daemonSetsNamespace "jarvice-cache-pull").metadata) }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: jarvice-cache-pull
{{- if empty .Values.jarvice.JARVICE_DAEMONSETS_NAMESPACE }}
  namespace: {{ .Release.Namespace }}-daemonsets
{{- else }}
  namespace: {{ .Values.jarvice.JARVICE_DAEMONSETS_NAMESPACE }}
{{- end }}
  annotations:
{{- if .Release.IsInstall }}
    "helm.sh/hook": post-install
{{- else }}
    "helm.sh/hook": post-upgrade
{{- end }}
data:
  image.config: |
    [
        {
            "ref": "base-centos7-realvnc:7.5",
            "registry": "gcr.io",
            "private": true,
            "config": "jarvice-docker",
            "arch": {
                "amd64": "gcr.io/jarvice-apps/base-centos7-realvnc:7.5"
            }
        },
        {
            "ref": "base-centos7-realvnc:7.4",
            "registry": "gcr.io",
            "private": true,
            "config": "jarvice-docker",
            "arch": {
                "amd64": "gcr.io/jarvice-apps/base-centos7-realvnc:7.4"
            }
        },
        {
            "ref": "app-filemanager",
            "registry": "docker.io",
            "private": false,
            "arch": {
                "amd64": "docker.io/jarvice/app-filemanager:latest"
            }
        },
        {
            "ref": "ubuntu:bionic",
            "registry": "docker.io",
            "private": false,
            "arch": {
                "amd64": "docker.io/ubuntu:bionic",
                "ppc64le": "docker.io/ubuntu:bionic"
            }
        },
        {
            "ref": "ubuntu:xenial",
            "registry": "docker.io",
            "private": false,
            "arch": {
                "amd64": "docker.io/ubuntu:xenial",
                "ppc64le": "docker.io/ubuntu:xenial"
            }
        },
        {
            "ref": "centos:8",
            "registry": "docker.io",
            "private": false,
            "arch": {
                "amd64": "docker.io/centos:8",
                "ppc64le": "docker.io/centos:8"
            }
        },
        {
            "ref": "centos:7",
            "registry": "docker.io",
            "private": false,
            "arch": {
                "amd64": "docker.io/centos:7",
                "ppc64le": "docker.io/centos:7"
            }
        }
    ]
  interval: "300"
---
{{- end }}
{{- end }}
{{- if .Values.jarvice.daemonsets.lxcfs.enabled }}
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: jarvice-lxcfs
{{- if empty .Values.jarvice.JARVICE_DAEMONSETS_NAMESPACE }}
  namespace: {{ .Release.Namespace }}-daemonsets
{{- else }}
  namespace: {{ .Values.jarvice.JARVICE_DAEMONSETS_NAMESPACE }}
{{- end }}
  labels:
    {{- include "jarvice.release_labels" . | indent 4 }}
    component: jarvice-lxcfs
spec:
  selector:
    matchLabels:
      component: jarvice-lxcfs
  template:
    metadata:
      labels:
        {{- include "jarvice.release_labels" . | indent 8 }}
        component: jarvice-lxcfs
    spec:
{{- if (not (empty .Values.jarvice.daemonsets.lxcfs.tolerations)) }}
      tolerations: {{ .Values.jarvice.daemonsets.lxcfs.tolerations }}
{{- else if (not (empty .Values.jarvice.daemonsets.tolerations)) }}
      tolerations: {{ .Values.jarvice.daemonsets.tolerations }}
{{- end }}
{{- if (not (empty .Values.jarvice.daemonsets.lxcfs.nodeAffinity)) }}
      affinity:
        nodeAffinity: {{ .Values.jarvice.daemonsets.lxcfs.nodeAffinity  }}
{{- else if (not (empty .Values.jarvice.daemonsets.nodeAffinity)) }}
      affinity:
        nodeAffinity: {{ .Values.jarvice.daemonsets.nodeAffinity }}
{{- end }}
{{- if (not (empty .Values.jarvice.daemonsets.lxcfs.nodeSelector)) }}
      nodeSelector: {{ .Values.jarvice.daemonsets.lxcfs.nodeSelector }}
{{- else if (not (empty .Values.jarvice.daemonsets.nodeSelector)) }}
      nodeSelector: {{ .Values.jarvice.daemonsets.nodeSelector }}
{{- end }}
      hostPID: true
      volumes:
        - name: rootfs
          hostPath:
            path: /
      containers:
      - name: jarvice-lxcfs
        image: {{ .Values.jarvice.daemonsets.lxcfs.image }}
        imagePullPolicy: {{ default "IfNotPresent" .Values.jarvice.daemonsets.lxcfs.imagePullPolicy }}
        env:
          - name: HOST_LXCFS_DIR
{{- if empty .Values.jarvice.daemonsets.lxcfs.env.HOST_LXCFS_DIR }}
            value: "/var/lib/lxcfs"
{{- else }}
            value: "{{ .Values.jarvice.daemonsets.lxcfs.env.HOST_LXCFS_DIR }}"
{{- end }}
          - name: HOST_LXCFS_INSTALL_DIR
{{- if empty .Values.jarvice.daemonsets.lxcfs.env.HOST_LXCFS_INSTALL_DIR }}
            value: "/usr/local/lxcfs-daemonset"
{{- else }}
            value: "{{ .Values.jarvice.daemonsets.lxcfs.env.HOST_LXCFS_INSTALL_DIR }}"
{{- end }}
        volumeMounts:
          - name: rootfs
            mountPath: /host
        securityContext:
          privileged: true
{{- if empty .Values.jarvice.JARVICE_DAEMONSETS_NAMESPACE }}
      priorityClassName: {{ .Release.Namespace }}-daemonsets
{{- else }}
      priorityClassName: {{ .Values.jarvice.JARVICE_DAEMONSETS_NAMESPACE }}
{{- end }}
---
{{- end }}
{{- if .Values.jarvice.daemonsets.nvidia.enabled }}
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: jarvice-nvidia-device-plugin
{{- if empty .Values.jarvice.JARVICE_DAEMONSETS_NAMESPACE }}
  namespace: {{ .Release.Namespace }}-daemonsets
{{- else }}
  namespace: {{ .Values.jarvice.JARVICE_DAEMONSETS_NAMESPACE }}
{{- end }}
  labels:
    {{- include "jarvice.release_labels" . | indent 4 }}
    component: jarvice-nvidia-device-plugin
spec:
  selector:
    matchLabels:
      component: jarvice-nvidia-device-plugin
  template:
    metadata:
      labels:
        {{- include "jarvice.release_labels" . | indent 8 }}
        component: jarvice-nvidia-device-plugin
    spec:
{{- if (not (empty .Values.jarvice.daemonsets.nvidia.tolerations)) }}
      tolerations: {{ .Values.jarvice.daemonsets.nvidia.tolerations }}
{{- else if (not (empty .Values.jarvice.daemonsets.tolerations)) }}
      tolerations: {{ .Values.jarvice.daemonsets.tolerations }}
{{- end }}
{{- if (not (empty .Values.jarvice.daemonsets.nvidia.nodeAffinity)) }}
      affinity:
        nodeAffinity: {{ .Values.jarvice.daemonsets.nvidia.nodeAffinity  }}
{{- else if (not (empty .Values.jarvice.daemonsets.nodeAffinity)) }}
      affinity:
        nodeAffinity: {{ .Values.jarvice.daemonsets.nodeAffinity }}
{{- end }}
{{- if (not (empty .Values.jarvice.daemonsets.nvidia.nodeSelector)) }}
      nodeSelector: {{ .Values.jarvice.daemonsets.nvidia.nodeSelector }}
{{- else if (not (empty .Values.jarvice.daemonsets.nodeSelector)) }}
      nodeSelector: {{ .Values.jarvice.daemonsets.nodeSelector }}
{{- end }}
      volumes:
        - name: device-plugins
          hostPath:
            path: /var/lib/kubelet/device-plugins
      containers:
      - name: jarvice-nvidia-device-plugin
        image: {{ .Values.jarvice.daemonsets.nvidia.image }}
        imagePullPolicy: {{ default "IfNotPresent" .Values.jarvice.daemonsets.nvidia.imagePullPolicy }}
        volumeMounts:
          - name: device-plugins
            mountPath: /var/lib/kubelet/device-plugins
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop: ["ALL"]
{{- if empty .Values.jarvice.JARVICE_DAEMONSETS_NAMESPACE }}
      priorityClassName: {{ .Release.Namespace }}-daemonsets
{{- else }}
      priorityClassName: {{ .Values.jarvice.JARVICE_DAEMONSETS_NAMESPACE }}
{{- end }}
---
{{- end }}
{{- if .Values.jarvice.daemonsets.xilinx_fpga.enabled }}
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: jarvice-xilinx-fpga-device-plugin
{{- if empty .Values.jarvice.JARVICE_DAEMONSETS_NAMESPACE }}
  namespace: {{ .Release.Namespace }}-daemonsets
{{- else }}
  namespace: {{ .Values.jarvice.JARVICE_DAEMONSETS_NAMESPACE }}
{{- end }}
  labels:
    {{- include "jarvice.release_labels" . | indent 4 }}
    component: jarvice-xilinx-fpga-device-plugin
spec:
  selector:
    matchLabels:
      component: jarvice-xilinx-fpga-device-plugin
  template:
    metadata:
      labels:
        {{- include "jarvice.release_labels" . | indent 8 }}
        component: jarvice-xilinx-fpga-device-plugin
    spec:
{{- if (not (empty .Values.jarvice.daemonsets.xilinx_fpga.tolerations)) }}
      tolerations: {{ .Values.jarvice.daemonsets.xilinx_fpga.tolerations }}
{{- else if (not (empty .Values.jarvice.daemonsets.tolerations)) }}
      tolerations: {{ .Values.jarvice.daemonsets.tolerations }}
{{- end }}
{{- if (not (empty .Values.jarvice.daemonsets.xilinx_fpga.nodeAffinity)) }}
      affinity:
        nodeAffinity: {{ .Values.jarvice.daemonsets.xilinx_fpga.nodeAffinity  }}
{{- else if (not (empty .Values.jarvice.daemonsets.nodeAffinity)) }}
      affinity:
        nodeAffinity: {{ .Values.jarvice.daemonsets.nodeAffinity }}
{{- end }}
{{- if (not (empty .Values.jarvice.daemonsets.xilinx_fpga.nodeSelector)) }}
      nodeSelector: {{ .Values.jarvice.daemonsets.xilinx_fpga.nodeSelector }}
{{- else if (not (empty .Values.jarvice.daemonsets.nodeSelector)) }}
      nodeSelector: {{ .Values.jarvice.daemonsets.nodeSelector }}
{{- end }}
      volumes:
        - name: device-plugins
          hostPath:
            path: /var/lib/kubelet/device-plugins
        - name: dev
          hostPath:
            path: /dev
      containers:
      - name: jarvice-xilinx-fpga-device-plugin
        image: {{ .Values.jarvice.daemonsets.xilinx_fpga.image }}
        imagePullPolicy: {{ default "IfNotPresent" .Values.jarvice.daemonsets.xilinx_fpga.imagePullPolicy }}
        volumeMounts:
          - name: device-plugins
            mountPath: /var/lib/kubelet/device-plugins
          - name: dev
            mountPath: /dev
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop: ["ALL"]
{{- if empty .Values.jarvice.JARVICE_DAEMONSETS_NAMESPACE }}
      priorityClassName: {{ .Release.Namespace }}-daemonsets
{{- else }}
      priorityClassName: {{ .Values.jarvice.JARVICE_DAEMONSETS_NAMESPACE }}
{{- end }}
---
{{- end }}
{{- if .Values.jarvice.daemonsets.rdma.enabled }}
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: jarvice-rdma-device-plugin
{{- if empty .Values.jarvice.JARVICE_DAEMONSETS_NAMESPACE }}
  namespace: {{ .Release.Namespace }}-daemonsets
{{- else }}
  namespace: {{ .Values.jarvice.JARVICE_DAEMONSETS_NAMESPACE }}
{{- end }}
  labels:
    {{- include "jarvice.release_labels" . | indent 4 }}
    component: jarvice-rdma-device-plugin
spec:
  selector:
    matchLabels:
      component: jarvice-rdma-device-plugin
  template:
    metadata:
      labels:
        {{- include "jarvice.release_labels" . | indent 8 }}
        component: jarvice-rdma-device-plugin
    spec:
      hostNetwork: true
{{- if (not (empty .Values.jarvice.daemonsets.rdma.tolerations)) }}
      tolerations: {{ .Values.jarvice.daemonsets.rdma.tolerations }}
{{- else if (not (empty .Values.jarvice.daemonsets.tolerations)) }}
      tolerations: {{ .Values.jarvice.daemonsets.tolerations }}
{{- end }}
{{- if (not (empty .Values.jarvice.daemonsets.rdma.nodeAffinity)) }}
      affinity:
        nodeAffinity: {{ .Values.jarvice.daemonsets.rdma.nodeAffinity  }}
{{- else if (not (empty .Values.jarvice.daemonsets.nodeAffinity)) }}
      affinity:
        nodeAffinity: {{ .Values.jarvice.daemonsets.nodeAffinity }}
{{- end }}
{{- if (not (empty .Values.jarvice.daemonsets.rdma.nodeSelector)) }}
      nodeSelector: {{ .Values.jarvice.daemonsets.rdma.nodeSelector }}
{{- else if (not (empty .Values.jarvice.daemonsets.nodeSelector)) }}
      nodeSelector: {{ .Values.jarvice.daemonsets.nodeSelector }}
{{- end }}
      volumes:
        - name: device-plugins
          hostPath:
            path: /var/lib/kubelet/device-plugins
        - name: devinfiniband
          hostPath:
            path: /dev/infiniband
        - name: devknem
          hostPath:
            path: /dev/knem
      containers:
      - name: jarvice-rdma-device-plugin
        image: {{ .Values.jarvice.daemonsets.rdma.image }}
        imagePullPolicy: {{ default "IfNotPresent" .Values.jarvice.daemonsets.rdma.imagePullPolicy }}
        volumeMounts:
          - name: device-plugins
            mountPath: /var/lib/kubelet/device-plugins
          - name: devinfiniband
            mountPath: /dev/infiniband
          - name: devknem
            mountPath: /dev/knem
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop: ["ALL"]
{{- if empty .Values.jarvice.JARVICE_DAEMONSETS_NAMESPACE }}
      priorityClassName: {{ .Release.Namespace }}-daemonsets
{{- else }}
      priorityClassName: {{ .Values.jarvice.JARVICE_DAEMONSETS_NAMESPACE }}
{{- end }}
---
{{- end }}
{{- if .Values.jarvice.daemonsets.dri_optional.enabled }}
{{- $driPreviouslyInstalled := false }}
{{- range $index, $service := $daemonSetsItems }}
{{- if and (eq $service.metadata.name "jarvice-dri-optional-device-plugin") (not (eq $service.metadata.namespace $daemonSetsNamespace)) }}
{{- $driPreviouslyInstalled = true }}
{{- end }}
{{- end }}
{{- if (not ($driPreviouslyInstalled)) }}
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: jarvice-dri-optional-device-plugin
{{- if empty .Values.jarvice.JARVICE_DAEMONSETS_NAMESPACE }}
  namespace: {{ .Release.Namespace }}-daemonsets
{{- else }}
  namespace: {{ .Values.jarvice.JARVICE_DAEMONSETS_NAMESPACE }}
{{- end }}
  labels:
    {{- include "jarvice.release_labels" . | indent 4 }}
    component: jarvice-dri-optional-device-plugin
spec:
  selector:
    matchLabels:
      component: jarvice-dri-optional-device-plugin
  template:
    metadata:
      labels:
        {{- include "jarvice.release_labels" . | indent 8 }}
        component: jarvice-dri-optional-device-plugin
    spec:
{{- if (not (empty .Values.jarvice.daemonsets.dri_optional.tolerations)) }}
      tolerations: {{ .Values.jarvice.daemonsets.dri_optional.tolerations }}
{{- else if (not (empty .Values.jarvice.daemonsets.tolerations)) }}
      tolerations: {{ .Values.jarvice.daemonsets.tolerations }}
{{- end }}
{{- if (not (empty .Values.jarvice.daemonsets.dri_optional.nodeAffinity)) }}
      affinity:
        nodeAffinity: {{ .Values.jarvice.daemonsets.dri_optional.nodeAffinity  }}
{{- else if (not (empty .Values.jarvice.daemonsets.nodeAffinity)) }}
      affinity:
        nodeAffinity: {{ .Values.jarvice.daemonsets.nodeAffinity }}
{{- end }}
{{- if (not (empty .Values.jarvice.daemonsets.dri_optional.nodeSelector)) }}
      nodeSelector: {{ .Values.jarvice.daemonsets.dri_optional.nodeSelector }}
{{- else if (not (empty .Values.jarvice.daemonsets.nodeSelector)) }}
      nodeSelector: {{ .Values.jarvice.daemonsets.nodeSelector }}
{{- end }}
      volumes:
        - name: device-plugins
          hostPath:
            path: /var/lib/kubelet/device-plugins
      initContainers:
      - name: init-delay
        image: gcr.io/jarvice/busybox:latest
        imagePullPolicy: "IfNotPresent"
        command: ['sh', '-c', 'sleep ${DRI_INIT_DELAY}']
        env:
        - name: DRI_INIT_DELAY
          value: "{{ default 300 .Values.jarvice.daemonsets.dri_optional.env.DRI_INIT_DELAY }}"
      containers:
      - name: jarvice-dri-optional-device-plugin
        image: {{ .Values.jarvice.daemonsets.dri_optional.image }}
        imagePullPolicy: {{ default "IfNotPresent" .Values.jarvice.daemonsets.dri_optional.imagePullPolicy }}
        env:
        - name: DRI_DEFAULT_CAPACITY
          value: "{{ default 1 .Values.jarvice.daemonsets.dri_optional.env.DRI_DEFAULT_CAPACITY }}"
        volumeMounts:
          - name: device-plugins
            mountPath: /var/lib/kubelet/device-plugins
        securityContext:
          privileged: true
          capabilities:
            drop: ["ALL"]
{{- if empty .Values.jarvice.JARVICE_DAEMONSETS_NAMESPACE }}
      priorityClassName: {{ .Release.Namespace }}-daemonsets
{{- else }}
      priorityClassName: {{ .Values.jarvice.JARVICE_DAEMONSETS_NAMESPACE }}
{{- end }}
---
{{- end }}
{{- end }}
{{- if .Values.jarvice.daemonsets.disable_hyper_threading.enabled }}
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: jarvice-disable-hyper-threading
{{- if empty .Values.jarvice.JARVICE_DAEMONSETS_NAMESPACE }}
  namespace: {{ .Release.Namespace }}-daemonsets
{{- else }}
  namespace: {{ .Values.jarvice.JARVICE_DAEMONSETS_NAMESPACE }}
{{- end }}
  labels:
    {{- include "jarvice.release_labels" . | indent 4 }}
    component: jarvice-disable-hyper-threading
spec:
  selector:
    matchLabels:
      component: jarvice-disable-hyper-threading
  template:
    metadata:
      labels:
        {{- include "jarvice.release_labels" . | indent 8 }}
        component: jarvice-disable-hyper-threading
    spec:
      hostPID: true
{{- if (not (empty .Values.jarvice.daemonsets.disable_hyper_threading.tolerations)) }}
      tolerations: {{ .Values.jarvice.daemonsets.disable_hyper_threading.tolerations }}
{{- else if (not (empty .Values.jarvice.daemonsets.tolerations)) }}
      tolerations: {{ .Values.jarvice.daemonsets.tolerations }}
{{- end }}
{{- if (not (empty .Values.jarvice.daemonsets.disable_hyper_threading.nodeAffinity)) }}
      affinity:
        nodeAffinity: {{ .Values.jarvice.daemonsets.disable_hyper_threading.nodeAffinity  }}
{{- else if (not (empty .Values.jarvice.daemonsets.nodeAffinity)) }}
      affinity:
        nodeAffinity: {{ .Values.jarvice.daemonsets.nodeAffinity }}
{{- end }}
{{- if (not (empty .Values.jarvice.daemonsets.disable_hyper_threading.nodeSelector)) }}
      nodeSelector: {{ .Values.jarvice.daemonsets.disable_hyper_threading.nodeSelector }}
{{- else if (not (empty .Values.jarvice.daemonsets.nodeSelector)) }}
      nodeSelector: {{ .Values.jarvice.daemonsets.nodeSelector }}
{{- end }}
      containers:
      - name: pause
        image: "gcr.io/google-containers/pause:3.2"
        imagePullPolicy: "IfNotPresent"
      initContainers:
      - name: jarvice-disable-hyper-threading
        image: {{ .Values.jarvice.daemonsets.disable_hyper_threading.image }}
        imagePullPolicy: {{ default "IfNotPresent" .Values.jarvice.daemonsets.disable_hyper_threading.imagePullPolicy }}
        command:
          - /bin/sh
          - -c
          - nsenter -t 1 -m -u -i -n -p -- /bin/sh -c "$DISABLE_HYPER_THREADING"
        env:
        - name: DISABLE_HYPER_THREADING
          value: |
            echo "Starting CPU hyper-threading disablement on $(hostname)..."
            for n in $(cat /sys/devices/system/cpu/cpu*/topology/thread_siblings_list | cut -s -d, -f2- | tr ',' '\n' | sort -un); do
                echo "Disabling cpu$n..."
                echo 0 > /sys/devices/system/cpu/cpu$n/online
            done
            echo "Finished CPU hyper-threading disablement on $(hostname)..."
            lscpu --extended || /bin/true
        securityContext:
          privileged: true
{{- if empty .Values.jarvice.JARVICE_DAEMONSETS_NAMESPACE }}
      priorityClassName: {{ .Release.Namespace }}-daemonsets
{{- else }}
      priorityClassName: {{ .Values.jarvice.JARVICE_DAEMONSETS_NAMESPACE }}
{{- end }}
---
{{- end }}
{{- if .Values.jarvice_registry_proxy.enabled }}
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: jarvice-registry-proxy
{{- if empty .Values.jarvice.JARVICE_DAEMONSETS_NAMESPACE }}
  namespace: {{ .Release.Namespace }}-daemonsets
{{- else }}
  namespace: {{ .Values.jarvice.JARVICE_DAEMONSETS_NAMESPACE }}
{{- end }}
  labels:
    {{- include "jarvice.release_labels" . | indent 4 }}
    component: jarvice-registry-proxy
spec:
  selector:
    matchLabels:
      component: jarvice-registry-proxy
  template:
    metadata:
      labels:
        {{- include "jarvice.release_labels" . | indent 8 }}
        component: jarvice-registry-proxy
    spec:
      hostPID: true
{{- if (not (empty .Values.jarvice.daemonsets.jarvice_registry_proxy.tolerations)) }}
      tolerations: {{ .Values.jarvice.daemonsets.jarvice_registry_proxy.tolerations }}
{{- else if (not (empty .Values.jarvice.daemonsets.tolerations)) }}
      tolerations: {{ .Values.jarvice.daemonsets.tolerations }}
{{- end }}
{{- if (not (empty .Values.jarvice.daemonsets.jarvice_registry_proxy.nodeAffinity)) }}
      affinity:
        nodeAffinity: {{ .Values.jarvice.daemonsets.jarvice_registry_proxy.nodeAffinity  }}
{{- else if (not (empty .Values.jarvice.daemonsets.nodeAffinity)) }}
      affinity:
        nodeAffinity: {{ .Values.jarvice.daemonsets.nodeAffinity }}
{{- end }}
{{- if (not (empty .Values.jarvice.daemonsets.jarvice_registry_proxy.nodeSelector)) }}
      nodeSelector: {{ .Values.jarvice.daemonsets.jarvice_registry_proxy.nodeSelector }}
{{- else if (not (empty .Values.jarvice.daemonsets.nodeSelector)) }}
      nodeSelector: {{ .Values.jarvice.daemonsets.nodeSelector }}
{{- end }}
      containers:
      - name: pause
        image: "gcr.io/google-containers/pause:3.2"
        imagePullPolicy: "IfNotPresent"
      initContainers:
      - name: jarvice-registry-proxy-ds
        image: {{ .Values.jarvice.daemonsets.jarvice_registry_proxy.image }}
        imagePullPolicy: {{ default "IfNotPresent" .Values.jarvice.daemonsets.jarvice_registry_proxy.imagePullPolicy }}
        command:
          - /bin/sh
          - -c
          - nsenter -t 1 -m -u -i -n -p -- /bin/sh -c "$DEPLOY_CA_CERTIFICATE"
        env:
        - name: DOCKER_CERTS_DIR
          value: "{{ .Values.jarvice.daemonsets.jarvice_registry_proxy.env.DOCKER_CERTS_DIR }}"
        - name: DEPLOY_CA_CERTIFICATE
          value: |
            echo "Deploying jarvice-registry-proxy CA certificate to $DOCKER_CERTS_DIR on $(hostname)..."
            certs_dir="$DOCKER_CERTS_DIR/localhost:{{ .Values.jarvice_registry_proxy.nodePort }}"
            mkdir -p $certs_dir
            echo | openssl s_client -showcerts -connect localhost:{{ .Values.jarvice_registry_proxy.nodePort }} </dev/null 2>/dev/null | openssl x509 -outform PEM >$certs_dir/ca.crt
            echo "Finished deploying jarvice-registry-proxy CA certificate to $DOCKER_CERTS_DIR on $(hostname)..."
        securityContext:
          privileged: true
{{- if empty .Values.jarvice.JARVICE_DAEMONSETS_NAMESPACE }}
      priorityClassName: {{ .Release.Namespace }}-daemonsets
{{- else }}
      priorityClassName: {{ .Values.jarvice.JARVICE_DAEMONSETS_NAMESPACE }}
{{- end }}
---
{{- end }}
{{- if .Values.jarvice.daemonsets.node_init.enabled }}
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: jarvice-node-init
{{- if empty .Values.jarvice.JARVICE_DAEMONSETS_NAMESPACE }}
  namespace: {{ .Release.Namespace }}-daemonsets
{{- else }}
  namespace: {{ .Values.jarvice.JARVICE_DAEMONSETS_NAMESPACE }}
{{- end }}
  labels:
    {{- include "jarvice.release_labels" . | indent 4 }}
    component: jarvice-node-init
spec:
  selector:
    matchLabels:
      component: jarvice-node-init
  template:
    metadata:
      labels:
        {{- include "jarvice.release_labels" . | indent 8 }}
        component: jarvice-node-init
    spec:
      hostPID: true
{{- if (not (empty .Values.jarvice.daemonsets.node_init.tolerations)) }}
      tolerations: {{ .Values.jarvice.daemonsets.node_init.tolerations }}
{{- else if (not (empty .Values.jarvice.daemonsets.tolerations)) }}
      tolerations: {{ .Values.jarvice.daemonsets.tolerations }}
{{- end }}
{{- if (not (empty .Values.jarvice.daemonsets.node_init.nodeAffinity)) }}
      affinity:
        nodeAffinity: {{ .Values.jarvice.daemonsets.node_init.nodeAffinity  }}
{{- else if (not (empty .Values.jarvice.daemonsets.nodeAffinity)) }}
      affinity:
        nodeAffinity: {{ .Values.jarvice.daemonsets.nodeAffinity }}
{{- end }}
{{- if (not (empty .Values.jarvice.daemonsets.node_init.nodeSelector)) }}
      nodeSelector: {{ .Values.jarvice.daemonsets.node_init.nodeSelector }}
{{- else if (not (empty .Values.jarvice.daemonsets.nodeSelector)) }}
      nodeSelector: {{ .Values.jarvice.daemonsets.nodeSelector }}
{{- end }}
      containers:
      - name: pause
        image: "gcr.io/google-containers/pause:3.2"
        imagePullPolicy: "IfNotPresent"
      initContainers:
      - name: jarvice-node-init
        image: {{ .Values.jarvice.daemonsets.node_init.image }}
        imagePullPolicy: {{ default "IfNotPresent" .Values.jarvice.daemonsets.node_init.imagePullPolicy }}
        command:
          - /bin/sh
          - -c
          - nsenter -t 1 -m -u -i -n -p -- /bin/sh -c "$COMMAND"
        env:
        - name: COMMAND
          value: {{ toYaml .Values.jarvice.daemonsets.node_init.env.COMMAND | indent 10 }}
        securityContext:
          privileged: true
{{- if empty .Values.jarvice.JARVICE_DAEMONSETS_NAMESPACE }}
      priorityClassName: {{ .Release.Namespace }}-daemonsets
{{- else }}
      priorityClassName: {{ .Values.jarvice.JARVICE_DAEMONSETS_NAMESPACE }}
{{- end }}
---
{{- end }}
{{- if .Values.jarvice.daemonsets.nvidia_install.enabled }}
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: jarvice-nvidia-install
{{- if empty .Values.jarvice.JARVICE_DAEMONSETS_NAMESPACE }}
  namespace: {{ .Release.Namespace }}-daemonsets
{{- else }}
  namespace: {{ .Values.jarvice.JARVICE_DAEMONSETS_NAMESPACE }}
{{- end }}
  labels:
    {{- include "jarvice.release_labels" . | indent 4 }}
    component: jarvice-nvidia-install
spec:
  selector:
    matchLabels:
      component: jarvice-nvidia-install
  template:
    metadata:
      labels:
        {{- include "jarvice.release_labels" . | indent 8 }}
        component: jarvice-nvidia-install
    spec:
      hostPID: true
{{- if (not (empty .Values.jarvice.daemonsets.nvidia_install.tolerations)) }}
      tolerations: {{ .Values.jarvice.daemonsets.nvidia_install.tolerations }}
{{- else if (not (empty .Values.jarvice.daemonsets.tolerations)) }}
      tolerations: {{ .Values.jarvice.daemonsets.tolerations }}
{{- end }}
{{- if (not (empty .Values.jarvice.daemonsets.nvidia_install.nodeAffinity)) }}
      affinity:
        nodeAffinity: {{ .Values.jarvice.daemonsets.nvidia_install.nodeAffinity  }}
{{- else if (not (empty .Values.jarvice.daemonsets.nodeAffinity)) }}
      affinity:
        nodeAffinity: {{ .Values.jarvice.daemonsets.nodeAffinity }}
{{- end }}
{{- if (not (empty .Values.jarvice.daemonsets.nvidia_install.nodeSelector)) }}
      nodeSelector: {{ .Values.jarvice.daemonsets.nvidia_install.nodeSelector }}
{{- else if (not (empty .Values.jarvice.daemonsets.nodeSelector)) }}
      nodeSelector: {{ .Values.jarvice.daemonsets.nodeSelector }}
{{- end }}
      containers:
      - name: pause
        image: "gcr.io/google-containers/pause:3.2"
        imagePullPolicy: "IfNotPresent"
      initContainers:
      - name: jarvice-nvidia-install
        image: {{ .Values.jarvice.daemonsets.nvidia_install.image }}
        imagePullPolicy: {{ default "IfNotPresent" .Values.jarvice.daemonsets.nvidia_install.imagePullPolicy }}
        command:
          - /bin/sh
          - -c
          - nsenter -t 1 -m -u -i -n -p -- /bin/sh -c "$COMMAND"
        env:
        - name: NVIDIA_DRIVER_VERSION
          value: "{{ .Values.jarvice.daemonsets.nvidia_install.env.NVIDIA_DRIVER_VERSION }}"
        - name: COMMAND
          value: |-
{{ .Files.Get "files/install-nvidia-docker" | indent 12 }}
        securityContext:
          privileged: true
{{- if empty .Values.jarvice.JARVICE_DAEMONSETS_NAMESPACE }}
      priorityClassName: {{ .Release.Namespace }}-daemonsets
{{- else }}
      priorityClassName: {{ .Values.jarvice.JARVICE_DAEMONSETS_NAMESPACE }}
{{- end }}
---
{{- end }}
{{- if .Values.jarvice.daemonsets.flex_volume_plugin_nfs_nolock_install.enabled }}
{{- $flexPreviouslyInstalled := false }}
{{- range $index, $service := $daemonSetsItems }}
{{- if and (eq $service.metadata.name "jarvice-flex-volume-plugin-nfs-nolock-install") (not (eq $service.metadata.namespace $daemonSetsNamespace)) }}
{{- $flexPreviouslyInstalled = true }}
{{- end }}
{{- end }}
{{- if (not ($flexPreviouslyInstalled)) }}
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: jarvice-flex-volume-plugin-nfs-nolock-install
{{- if empty .Values.jarvice.JARVICE_DAEMONSETS_NAMESPACE }}
  namespace: {{ .Release.Namespace }}-daemonsets
{{- else }}
  namespace: {{ .Values.jarvice.JARVICE_DAEMONSETS_NAMESPACE }}
{{- end }}
  labels:
    {{- include "jarvice.release_labels" . | indent 4 }}
    component: jarvice-flex-volume-plugin-nfs-nolock-install
spec:
  selector:
    matchLabels:
      component: jarvice-flex-volume-plugin-nfs-nolock-install
  template:
    metadata:
      labels:
        {{- include "jarvice.release_labels" . | indent 8 }}
        component: jarvice-flex-volume-plugin-nfs-nolock-install
    spec:
      hostPID: true
{{- if (not (empty .Values.jarvice.daemonsets.flex_volume_plugin_nfs_nolock_install.tolerations)) }}
      tolerations: {{ .Values.jarvice.daemonsets.flex_volume_plugin_nfs_nolock_install.tolerations }}
{{- else if (not (empty .Values.jarvice.daemonsets.tolerations)) }}
      tolerations: {{ .Values.jarvice.daemonsets.tolerations }}
{{- end }}
{{- if (not (empty .Values.jarvice.daemonsets.flex_volume_plugin_nfs_nolock_install.nodeAffinity)) }}
      affinity:
        nodeAffinity: {{ .Values.jarvice.daemonsets.flex_volume_plugin_nfs_nolock_install.nodeAffinity  }}
{{- else if (not (empty .Values.jarvice.daemonsets.nodeAffinity)) }}
      affinity:
        nodeAffinity: {{ .Values.jarvice.daemonsets.nodeAffinity }}
{{- end }}
{{- if (not (empty .Values.jarvice.daemonsets.flex_volume_plugin_nfs_nolock_install.nodeSelector)) }}
      nodeSelector: {{ .Values.jarvice.daemonsets.flex_volume_plugin_nfs_nolock_install.nodeSelector }}
{{- else if (not (empty .Values.jarvice.daemonsets.nodeSelector)) }}
      nodeSelector: {{ .Values.jarvice.daemonsets.nodeSelector }}
{{- end }}
      containers:
      - name: pause
        image: "gcr.io/google-containers/pause:3.2"
        imagePullPolicy: "IfNotPresent"
      initContainers:
      - name: jarvice-flex-volume-plugin-nfs-nolock-install
        image: {{ .Values.jarvice.daemonsets.flex_volume_plugin_nfs_nolock_install.image }}
        imagePullPolicy: {{ default "IfNotPresent" .Values.jarvice.daemonsets.flex_volume_plugin_nfs_nolock_install.imagePullPolicy }}
        command:
          - /bin/sh
          - -c
          - nsenter -t 1 -m -u -i -n -p -- /bin/sh -c "$COMMAND"
        env:
        - name: KUBELET_PLUGIN_DIR
          value: "{{ .Values.jarvice.daemonsets.flex_volume_plugin_nfs_nolock_install.env.KUBELET_PLUGIN_DIR }}"
        - name: COMMAND
          value: |-
{{ .Files.Get "files/install-flex-nfs-nolock" | indent 12 }}
        securityContext:
          privileged: true
{{- if empty .Values.jarvice.JARVICE_DAEMONSETS_NAMESPACE }}
      priorityClassName: {{ .Release.Namespace }}-daemonsets
{{- else }}
      priorityClassName: {{ .Values.jarvice.JARVICE_DAEMONSETS_NAMESPACE }}
{{- end }}
---
{{- end }}
{{- end }}
